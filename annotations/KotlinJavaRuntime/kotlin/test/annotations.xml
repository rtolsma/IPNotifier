<root>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertTrue(boolean, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter void assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertEquals(java.lang.Object, java.lang.Object, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertFalse(boolean, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNot(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNotNull(T, java.lang.String, kotlin.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void expect(T, kotlin.Function0&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNot(kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage T failsWith(java.lang.Class&lt;T&gt;, kotlin.Function0&lt;? extends java.lang.Object&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter void assertNotNull(java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void fail$default(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage java.lang.Object assertNotNull$default(java.lang.Object, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter void assertTrue(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertEquals$default(java.lang.Object, java.lang.Object, java.lang.String, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.TestJVM.80cd334f void todo(kotlin.Function0&lt;? extends java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void fail(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertFalse$default(boolean, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertEquals$default(java.lang.Object, java.lang.Object, java.lang.String, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void expect(T, java.lang.String, kotlin.Function0&lt;? extends T&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter void fail(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNot(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter void assertEquals(java.lang.String, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e java.lang.Throwable fails(kotlin.Function0&lt;? extends kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage $kotlinPackage'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNull$default(java.lang.Object, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter void assertNotNull(java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertFalse(boolean, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNot(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.TestJVM.80cd334f T failsWith(java.lang.Class&lt;T&gt;, kotlin.Function0&lt;? extends java.lang.Object&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.TestJVM.80cd334f void setAsserter(kotlin.test.Asserter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertTrue(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter void assertNull(java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertTrue(kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertTrue$default(boolean, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void todo(kotlin.Function0&lt;? extends java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter void assertNotEquals(java.lang.String, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNotEquals$default(java.lang.Object, java.lang.Object, java.lang.String, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertTrue(kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter $kotlinClass'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNotEquals$default(java.lang.Object, java.lang.Object, java.lang.String, int) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void setAsserter(kotlin.test.Asserter) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNull$default(java.lang.Object, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage T failsWith(java.lang.Class&lt;T&gt;, kotlin.Function0&lt;? extends java.lang.Object&gt;)'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNot(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertTrue(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e java.lang.Object assertNotNull$default(java.lang.Object, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertTrue(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter void assertTrue(java.lang.String, boolean) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter void fail(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertTrue$default(boolean, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.TestJVM.80cd334f T failsWith(java.lang.Class&lt;T&gt;, kotlin.Function0&lt;? extends java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNotNull(T, java.lang.String, kotlin.Function1&lt;? super T,? extends R&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.DefaultAsserter void assertEquals(java.lang.String, java.lang.Object, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertFalse$default(boolean, java.lang.String, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void expect(T, kotlin.Function0&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void expect(T, java.lang.String, kotlin.Function0&lt;? extends T&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage java.lang.Throwable fails(kotlin.Function0&lt;? extends kotlin.Unit&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNot(kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void fail(java.lang.String) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter void assertNull(java.lang.String, java.lang.Object) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertTrue(java.lang.String, kotlin.Function0&lt;? extends java.lang.Boolean&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertTrue(boolean, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNull(java.lang.Object, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNotNull$default(java.lang.Object, java.lang.String, kotlin.Function1, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.TestJVM.80cd334f T failsWith(java.lang.Class&lt;T&gt;, kotlin.Function0&lt;? extends java.lang.Object&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.Asserter $kotlinClass'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNotNull(T, java.lang.String, kotlin.Function1&lt;? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void fail$default(java.lang.String, int) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNotNull$default(java.lang.Object, java.lang.String, kotlin.Function1, int) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNotEquals(java.lang.Object, java.lang.Object, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage T failsWith(java.lang.Class&lt;T&gt;, kotlin.Function0&lt;? extends java.lang.Object&gt;) 0'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void expect(T, java.lang.String, kotlin.Function0&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNotNull(T, java.lang.String, kotlin.Function1&lt;? super T,? extends R&gt;) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e T assertNotNull(T, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertEquals(java.lang.Object, java.lang.Object, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage.Test.d4906b5e void assertNotEquals(java.lang.Object, java.lang.Object, java.lang.String) 2'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void assertNull(java.lang.Object, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage T assertNotNull(T, java.lang.String) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
    <item name='kotlin.test.TestPackage void expect(T, java.lang.String, kotlin.Function0&lt;? extends T&gt;) 1'>
        <annotation name='org.jetbrains.annotations.NotNull'/>
    </item>
</root>
